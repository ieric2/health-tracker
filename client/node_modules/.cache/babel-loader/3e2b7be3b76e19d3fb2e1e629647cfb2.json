{"ast":null,"code":"var _jsxFileName = \"/Users/ieric/CIS350_final_project/web_app/src/components/home.component.js\";\nimport React, { Component } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport axios from 'axios';\nimport 'react-vis/dist/style.css';\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, LineSeries, DiscreteColorLegend } from 'react-vis';\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exerciseProgress: 0,\n      exerciseGoal: 0,\n      sleepProgress: 0,\n      sleepGoal: 0,\n      waterProgress: 0,\n      waterGoal: 0,\n      scores: []\n    };\n  }\n\n  componentDidMount() {\n    var exercises = [];\n    var sleeps = [];\n    var waters = [];\n    axios.get('http://localhost:5000/exercise_track/').then(response => {\n      var newArray = [];\n      var uniqueObject = {};\n\n      for (var i = response.data.length - 1; i >= 0; i--) {\n        var date = response.data[i]['date'];\n        uniqueObject[date] = response.data[i];\n      }\n\n      for (i in uniqueObject) {\n        newArray.push(uniqueObject[i]);\n      }\n\n      this.setState({\n        exerciseProgress: response.data[0]['hours']\n      });\n      exercises = newArray.map(exercise => {\n        return {\n          x: new Date(exercise.date),\n          y: exercise.hours\n        };\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n    axios.get('http://localhost:5000/exercise_goal/').then(response => {\n      if (response.data.length >= 1) {\n        this.setState({\n          exerciseGoal: response.data[0]['hours']\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    axios.get('http://localhost:5000/sleep_track/').then(response => {\n      var newArray = [];\n      var uniqueObject = {};\n\n      for (var i = response.data.length - 1; i >= 0; i--) {\n        var date = response.data[i]['date'];\n        uniqueObject[date] = response.data[i];\n      }\n\n      for (i in uniqueObject) {\n        newArray.push(uniqueObject[i]);\n      }\n\n      this.setState({\n        sleepProgress: response.data[0]['hours']\n      });\n      sleeps = newArray.map(sleep => {\n        return {\n          x: new Date(sleep.date),\n          y: sleep.hours\n        };\n      });\n    });\n    axios.get('http://localhost:5000/sleep_goal/').then(response => {\n      if (response.data.length >= 1) {\n        this.setState({\n          sleepGoal: response.data[0]['hours']\n        });\n      }\n    });\n    axios.get('http://localhost:5000/water_goal/').then(response => {\n      if (response.data.length >= 1) {\n        this.setState({\n          waterGoal: response.data[0]['cups']\n        });\n      }\n    });\n    axios.get('http://localhost:5000/water_track/').then(response => {\n      var newArray = [];\n      var uniqueObject = {};\n\n      for (var i = response.data.length - 1; i >= 0; i--) {\n        var date = response.data[i]['date'];\n        uniqueObject[date] = response.data[i];\n      }\n\n      for (i in uniqueObject) {\n        newArray.push(uniqueObject[i]);\n      }\n\n      this.setState({\n        waterProgress: response.data[0]['cups']\n      });\n      waters = newArray.map(water => {\n        return {\n          x: new Date(water.date),\n          y: water.cups\n        };\n      });\n    });\n    this.setState({\n      scores: Math.round(exercises / this.state.exerciseGoal * 100)\n    });\n  }\n\n  render() {\n    var exercisePercentage = Math.round(this.state.exerciseProgress / this.state.exerciseGoal * 100);\n\n    if (exercisePercentage > 100) {\n      exercisePercentage = 100;\n    }\n\n    var sleepPercentage = Math.round(this.state.sleepProgress / this.state.sleepGoal * 100);\n\n    if (sleepPercentage > 100) {\n      sleepPercentage = 100;\n    }\n\n    var waterPercentage = Math.round(this.state.waterProgress / this.state.waterGoal * 100);\n\n    if (waterPercentage > 100) {\n      waterPercentage = 100;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \" HomePage \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"text\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \" Exercise Goal Progress \"), React.createElement(ProgressBar, {\n      now: exercisePercentage,\n      label: `${exercisePercentage}%`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"text\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \" Sleep Goal Progress \"), React.createElement(ProgressBar, {\n      now: sleepPercentage,\n      label: `${sleepPercentage}%`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"text\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \" Water Goal Progress \"), React.createElement(ProgressBar, {\n      now: waterPercentage,\n      label: `${waterPercentage}%`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"text\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \" Health Score :  \", exercisePercentage + sleepPercentage + waterPercentage, \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(XYPlot, {\n      xType: \"time\",\n      height: 300,\n      width: 300,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(HorizontalGridLines, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(XAxis, {\n      title: \"Date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      title: \"Hours Slept\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(DiscreteColorLegend, {\n      items: this.state.legend,\n      type: \"horizontal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(LineSeries, {\n      data: this.state.sleeps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(LineSeries, {\n      data: this.state.ideal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(LineSeries, {\n      data: this.state.goals,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/ieric/CIS350_final_project/web_app/src/components/home.component.js"],"names":["React","Component","ProgressBar","axios","XYPlot","XAxis","YAxis","HorizontalGridLines","LineSeries","DiscreteColorLegend","Home","constructor","props","state","exerciseProgress","exerciseGoal","sleepProgress","sleepGoal","waterProgress","waterGoal","scores","componentDidMount","exercises","sleeps","waters","get","then","response","newArray","uniqueObject","i","data","length","date","push","setState","map","exercise","x","Date","y","hours","catch","error","console","log","sleep","water","cups","Math","round","render","exercisePercentage","sleepPercentage","waterPercentage","legend","ideal","goals"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport axios from 'axios';\nimport 'react-vis/dist/style.css';\nimport {XYPlot, XAxis, YAxis, HorizontalGridLines, LineSeries, DiscreteColorLegend} from 'react-vis';\n\n\nexport default class Home extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      exerciseProgress: 0,\n      exerciseGoal: 0,\n      sleepProgress:0,\n      sleepGoal:0,\n      waterProgress: 0,\n      waterGoal: 0,\n      scores: [],\n    }\n  }\n\n  componentDidMount(){\n    var exercises = []\n    var sleeps = []\n    var waters = []\n\n    axios.get('http://localhost:5000/exercise_track/')\n     .then(response => {\n        var newArray = []\n        var uniqueObject = {};\n        for (var i = response.data.length - 1; i >= 0; i--){\n          var date = response.data[i]['date']\n          uniqueObject[date] = response.data[i]\n        }\n\n        for (i in uniqueObject) {\n          newArray.push(uniqueObject[i]);\n        }\n\n        this.setState({\n          exerciseProgress: response.data[0]['hours']\n        });\n\n\n        exercises = newArray.map((exercise)=>{\n          return {x: new Date(exercise.date), y: exercise.hours}\n        });\n      })\n     .catch((error) => {\n        console.log(error);\n     })\n\n    axios.get('http://localhost:5000/exercise_goal/')\n      .then(response =>{\n        if(response.data.length >= 1){\n          this.setState({\n            exerciseGoal: response.data[0]['hours']\n          });\n        }\n      })\n    .catch((error) => {\n      console.log(error);\n    })\n\n    axios.get('http://localhost:5000/sleep_track/')\n    .then(response =>{\n      var newArray = []\n      var uniqueObject = {};\n      for (var i = response.data.length - 1; i >= 0; i--){\n        var date = response.data[i]['date']\n        uniqueObject[date] = response.data[i]\n      }\n\n      for (i in uniqueObject) {\n        newArray.push(uniqueObject[i]);\n      }\n\n      this.setState({\n        sleepProgress: response.data[0]['hours']\n      });\n\n\n      sleeps = newArray.map((sleep)=>{\n        return {x: new Date(sleep.date), y: sleep.hours}\n      });\n    })\n\n    axios.get('http://localhost:5000/sleep_goal/')\n    .then(response =>{\n      if(response.data.length >= 1){\n        this.setState({\n          sleepGoal: response.data[0]['hours']\n        });\n      }\n    })\n\n    axios.get('http://localhost:5000/water_goal/')\n    .then(response =>{\n      if(response.data.length >= 1){\n        this.setState({\n          waterGoal: response.data[0]['cups']\n        });\n      }\n    })\n\n    axios.get('http://localhost:5000/water_track/')\n    .then(response =>{\n      var newArray = []\n      var uniqueObject = {};\n      for (var i = response.data.length - 1; i >= 0; i--){\n        var date = response.data[i]['date']\n        uniqueObject[date] = response.data[i]\n      }\n\n      for (i in uniqueObject) {\n        newArray.push(uniqueObject[i]);\n      }\n\n      this.setState({\n        waterProgress: response.data[0]['cups']\n      });\n\n\n      waters = newArray.map((water)=>{\n        return {x: new Date(water.date), y: water.cups}\n      });\n    })\n\n    this.setState({\n      scores: Math.round(exercises / this.state.exerciseGoal * 100)\n    })\n\n  }\n\n  render() {\n    var exercisePercentage = Math.round(this.state.exerciseProgress / this.state.exerciseGoal * 100)\n    if (exercisePercentage > 100){\n      exercisePercentage = 100\n    }\n\n    var sleepPercentage = Math.round(this.state.sleepProgress / this.state.sleepGoal * 100)\n    if (sleepPercentage > 100){\n      sleepPercentage = 100\n    }\n\n    var waterPercentage = Math.round(this.state.waterProgress / this.state.waterGoal * 100)\n    if (waterPercentage > 100){\n      waterPercentage = 100\n    }\n    return (\n      <div>\n        <h3> HomePage </h3>\n        <br/>\n        <text> Exercise Goal Progress </text>\n        <ProgressBar now={exercisePercentage} label={`${exercisePercentage}%`}/>\n        <text> Sleep Goal Progress </text>\n        <ProgressBar now={sleepPercentage} label={`${sleepPercentage}%`}/>\n        <text> Water Goal Progress </text>\n        <ProgressBar now={waterPercentage} label={`${waterPercentage}%`}/>\n        <br/>\n        <text> Health Score :  {exercisePercentage + sleepPercentage + waterPercentage} </text>\n        <br/>\n        <XYPlot xType=\"time\" height={300} width= {300}>\n          <HorizontalGridLines />\n          <XAxis title=\"Date\" />\n          <YAxis title=\"Hours Slept\"/>\n          <DiscreteColorLegend items={this.state.legend} type=\"horizontal\"/>\n            <LineSeries data={this.state.sleeps} />\n            <LineSeries data={this.state.ideal} />\n            <LineSeries data={this.state.goals} />\n        </XYPlot>\n\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}