{"ast":null,"code":"var _jsxFileName = \"/Users/ieric/CIS350_final_project/web_app/client/src/components/home.component.js\";\nimport React, { Component } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport axios from 'axios';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-vis/dist/style.css';\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, LineSeries, DiscreteColorLegend } from 'react-vis';\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exerciseProgress: 0,\n      exerciseGoal: 0,\n      exercisePercentage: 0,\n      sleepProgress: 0,\n      sleepGoal: 0,\n      sleepPercentage: 0,\n      waterProgress: 0,\n      waterGoal: 0,\n      waterPercentage: 0,\n      scores: []\n    };\n    this.logScore = this.logScore.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/exercise_track/getOne').then(response => {\n      if (response.data.length >= 1) {\n        this.setState({\n          exerciseProgress: response.data[0]['hours']\n        });\n      }\n    });\n    axios.get('http://localhost:5000/exercise_goal/').then(response => {\n      if (response.data.length >= 1) {\n        this.setState({\n          exerciseGoal: response.data[0]['hours']\n        });\n      }\n    });\n    axios.get('http://localhost:5000/sleep_track/getOne').then(response => {\n      if (response.data.length >= 1) {\n        this.setState({\n          sleepProgress: response.data[0]['hours']\n        });\n      }\n    });\n    axios.get('http://localhost:5000/sleep_goal/').then(response => {\n      if (response.data.length >= 1) {\n        this.setState({\n          sleepGoal: response.data[0]['hours']\n        });\n      }\n    });\n    axios.get('http://localhost:5000/water_track/getOne').then(response => {\n      if (response.data.length >= 1) {\n        this.setState({\n          waterProgress: response.data[0]['cups']\n        });\n      }\n    });\n    axios.get('http://localhost:5000/water_goal/').then(response => {\n      if (response.data.length >= 1) {\n        this.setState({\n          waterGoal: response.data[0]['cups']\n        });\n        var exercisePercentage = Math.round(this.state.exerciseProgress / this.state.exerciseGoal * 100);\n\n        if (exercisePercentage > 100) {\n          exercisePercentage = 100;\n        }\n\n        var sleepPercentage = Math.round(this.state.sleepProgress / this.state.sleepGoal * 100);\n\n        if (sleepPercentage > 100) {\n          sleepPercentage = 100;\n        }\n\n        var waterPercentage = Math.round(this.state.waterProgress / this.state.waterGoal * 100);\n\n        if (waterPercentage > 100) {\n          waterPercentage = 100;\n        }\n\n        this.setState({\n          exercisePercentage: exercisePercentage,\n          sleepPercentage: sleepPercentage,\n          waterPercentage: waterPercentage\n        });\n\n        if (this.state.waterGoal / 2 > this.state.waterProgress) {\n          alert(\"Please drink more water to prevent deyhdration\");\n        }\n\n        if (this.state.exerciseGoal / 2 > this.state.exerciseProgress) {\n          alert(\"Please exercise more to prevent lethargy\");\n        }\n\n        if (this.state.sleepGoal / 2 > this.state.sleepProgress) {\n          alert(\"Please sleep more or else you will not function properly\");\n        }\n      }\n    });\n    axios.get('http://localhost:5000/score/get').then(response => {\n      var e = [];\n      var newArray = [];\n      var uniqueObject = {};\n\n      for (var i = response.data.length - 1; i >= 0; i--) {\n        var date = response.data[i]['date'];\n        uniqueObject[date] = response.data[i];\n      }\n\n      for (i in uniqueObject) {\n        newArray.push(uniqueObject[i]);\n      }\n\n      e = newArray.map(score => {\n        return {\n          x: new Date(score.date),\n          y: score.score\n        };\n      });\n      this.setState({\n        scores: e\n      });\n    });\n  }\n\n  logScore(e) {\n    e.preventDefault();\n    console.log(this.state.date);\n    const score = {\n      score: this.state.exercisePercentage + this.state.sleepPercentage + this.state.waterPercentage,\n      date: new Date()\n    };\n    console.log(this.state.score);\n    axios.post('http://localhost:5000/score/add', this.state.score).then(res => console.log(res.data)).catch(error => {\n      console.log(error.response);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \" HomePage \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"text\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \" Exercise Goal Progress \"), React.createElement(ProgressBar, {\n      now: this.state.exercisePercentage,\n      label: `${this.state.exercisePercentage}%`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"text\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \" Sleep Goal Progress \"), React.createElement(ProgressBar, {\n      now: this.state.sleepPercentage,\n      label: `${this.state.sleepPercentage}%`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"text\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \" Water Goal Progress \"), React.createElement(ProgressBar, {\n      now: this.state.waterPercentage,\n      label: `${this.state.waterPercentage}%`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \" Health Score :  \", this.state.exercisePercentage + this.state.sleepPercentage + this.state.waterPercentage, \" \"), React.createElement(\"button\", {\n      onClick: this.logScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Log Score\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"View Health Score History\"), React.createElement(XYPlot, {\n      xType: \"time\",\n      height: 300,\n      width: 300,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(HorizontalGridLines, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(XAxis, {\n      title: \"Date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      title: \"Hours Slept\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(LineSeries, {\n      data: this.state.scores,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/ieric/CIS350_final_project/web_app/client/src/components/home.component.js"],"names":["React","Component","ProgressBar","axios","XYPlot","XAxis","YAxis","HorizontalGridLines","LineSeries","DiscreteColorLegend","Home","constructor","props","state","exerciseProgress","exerciseGoal","exercisePercentage","sleepProgress","sleepGoal","sleepPercentage","waterProgress","waterGoal","waterPercentage","scores","logScore","bind","componentDidMount","get","then","response","data","length","setState","Math","round","alert","e","newArray","uniqueObject","i","date","push","map","score","x","Date","y","preventDefault","console","log","post","res","catch","error","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport axios from 'axios';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-vis/dist/style.css';\nimport {XYPlot, XAxis, YAxis, HorizontalGridLines, LineSeries, DiscreteColorLegend} from 'react-vis';\n\n\nexport default class Home extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      exerciseProgress: 0,\n      exerciseGoal: 0,\n      exercisePercentage: 0,\n      sleepProgress:0,\n      sleepGoal:0,\n      sleepPercentage: 0,\n      waterProgress: 0,\n      waterGoal: 0,\n      waterPercentage: 0,\n      scores: [],\n    }\n    this.logScore = this.logScore.bind(this)\n  }\n\n  componentDidMount(){\n    axios.get('http://localhost:5000/exercise_track/getOne')\n    .then(response =>{\n      if(response.data.length >= 1){\n        this.setState({\n          exerciseProgress: response.data[0]['hours']\n        });\n      }\n    })\n\n    axios.get('http://localhost:5000/exercise_goal/')\n    .then(response =>{\n      if(response.data.length >= 1){\n        this.setState({\n          exerciseGoal: response.data[0]['hours']\n        });\n      }\n    })\n\n    axios.get('http://localhost:5000/sleep_track/getOne')\n    .then(response =>{\n      if(response.data.length >= 1){\n        this.setState({\n        sleepProgress: response.data[0]['hours']\n        });\n      }\n    })\n\n    axios.get('http://localhost:5000/sleep_goal/')\n    .then(response =>{\n      if(response.data.length >= 1){\n        this.setState({\n          sleepGoal: response.data[0]['hours']\n        });\n      }\n    })\n\n    axios.get('http://localhost:5000/water_track/getOne')\n    .then(response =>{\n      if(response.data.length >= 1){\n        this.setState({\n          waterProgress: response.data[0]['cups']\n        });\n      }\n    })\n\n    axios.get('http://localhost:5000/water_goal/')\n    .then(response =>{\n      if(response.data.length >= 1){\n        this.setState({\n          waterGoal: response.data[0]['cups']\n        });\n\n        var exercisePercentage = Math.round(this.state.exerciseProgress / this.state.exerciseGoal * 100)\n        if (exercisePercentage > 100){\n          exercisePercentage = 100\n        }\n\n        var sleepPercentage = Math.round(this.state.sleepProgress / this.state.sleepGoal * 100)\n        if (sleepPercentage > 100){\n          sleepPercentage = 100\n        }\n\n        var waterPercentage = Math.round(this.state.waterProgress / this.state.waterGoal * 100)\n        if (waterPercentage > 100){\n          waterPercentage = 100\n        }\n\n        this.setState({\n          exercisePercentage: exercisePercentage,\n          sleepPercentage: sleepPercentage,\n          waterPercentage: waterPercentage,\n        })\n\n\n\n        if (this.state.waterGoal / 2 > this.state.waterProgress){\n          alert(\"Please drink more water to prevent deyhdration\")\n        }\n\n        if (this.state.exerciseGoal / 2 > this.state.exerciseProgress){\n          alert(\"Please exercise more to prevent lethargy\")\n        }\n\n        if (this.state.sleepGoal / 2 > this.state.sleepProgress){\n          alert(\"Please sleep more or else you will not function properly\")\n        }\n      }\n    })\n\n    axios.get('http://localhost:5000/score/get')\n    .then(response =>{\n      var e = []\n      var newArray = []\n      var uniqueObject = {};\n      for (var i = response.data.length - 1; i >= 0; i--){\n        var date = response.data[i]['date']\n        uniqueObject[date] = response.data[i]\n      }\n\n      for (i in uniqueObject) {\n        newArray.push(uniqueObject[i]);\n      }\n\n\n      e = newArray.map((score)=>{\n        return {x: new Date(score.date), y: score.score}\n      });\n\n      this.setState({\n        scores: e\n      });\n\n    })\n\n  }\n\n  logScore(e) {\n    e.preventDefault();\n    console.log(this.state.date)\n    const score = {\n      score: this.state.exercisePercentage + this.state.sleepPercentage + this.state.waterPercentage,\n      date: new Date(),\n    };\n    console.log(this.state.score);\n    axios.post('http://localhost:5000/score/add', this.state.score)\n    .then(res => console.log(res.data))\n    .catch(error => {\n      console.log(error.response)\n    })\n\n  }\n\n  render() {\n\n\n    return (\n      <div>\n        <h3> HomePage </h3>\n        <br/>\n        <text> Exercise Goal Progress </text>\n        <ProgressBar now={this.state.exercisePercentage} label={`${this.state.exercisePercentage}%`}/>\n        <text> Sleep Goal Progress </text>\n        <ProgressBar now={this.state.sleepPercentage} label={`${this.state.sleepPercentage}%`}/>\n        <text> Water Goal Progress </text>\n        <ProgressBar now={this.state.waterPercentage} label={`${this.state.waterPercentage}%`}/>\n        <br/>\n        <b> Health Score :  {this.state.exercisePercentage + this.state.sleepPercentage + this.state.waterPercentage} </b>\n        <button onClick={this.logScore}>\n          Log Score\n        </button>\n        <br/>\n        <h3>View Health Score History</h3>\n        <XYPlot xType=\"time\" height={300} width= {300}>\n          <HorizontalGridLines />\n          <XAxis title=\"Date\" />\n          <YAxis title=\"Hours Slept\"/>\n            <LineSeries data={this.state.scores} />\n        </XYPlot>\n\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}